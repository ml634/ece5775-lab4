-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arraycopy_axis is
generic (
    C_S_AXI_S_AXILITE_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_S_AXILITE_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_s_axilite_AWVALID : IN STD_LOGIC;
    s_axi_s_axilite_AWREADY : OUT STD_LOGIC;
    s_axi_s_axilite_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_ADDR_WIDTH-1 downto 0);
    s_axi_s_axilite_WVALID : IN STD_LOGIC;
    s_axi_s_axilite_WREADY : OUT STD_LOGIC;
    s_axi_s_axilite_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_DATA_WIDTH-1 downto 0);
    s_axi_s_axilite_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_DATA_WIDTH/8-1 downto 0);
    s_axi_s_axilite_ARVALID : IN STD_LOGIC;
    s_axi_s_axilite_ARREADY : OUT STD_LOGIC;
    s_axi_s_axilite_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_ADDR_WIDTH-1 downto 0);
    s_axi_s_axilite_RVALID : OUT STD_LOGIC;
    s_axi_s_axilite_RREADY : IN STD_LOGIC;
    s_axi_s_axilite_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_DATA_WIDTH-1 downto 0);
    s_axi_s_axilite_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_s_axilite_BVALID : OUT STD_LOGIC;
    s_axi_s_axilite_BREADY : IN STD_LOGIC;
    s_axi_s_axilite_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    A_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    B_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_TVALID : OUT STD_LOGIC;
    B_TREADY : IN STD_LOGIC;
    B_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of arraycopy_axis is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "arraycopy_axis,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.258000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=170,HLS_SYN_LUT=206}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st5_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_45 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal M : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal arraycopy_axis_s_axilite_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal i_reg_163 : STD_LOGIC_VECTOR (5 downto 0);
    signal M_assign_fu_290_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal M_assign_reg_351 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_bdd_92 : BOOLEAN;
    signal tmp_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_356 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal ap_sig_bdd_108 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_ioackin_B_TREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal i_1_fu_303_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_133 : BOOLEAN;
    signal tmp_data_V_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_fu_98 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_102 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_fu_106 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_fu_110 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ioackin_B_TREADY : STD_LOGIC := '0';
    signal tmp_1_fu_266_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_286_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_309 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component arraycopy_axis_s_axilite_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        M : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    arraycopy_axis_s_axilite_s_axi_U : component arraycopy_axis_s_axilite_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_S_AXILITE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_S_AXILITE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_s_axilite_AWVALID,
        AWREADY => s_axi_s_axilite_AWREADY,
        AWADDR => s_axi_s_axilite_AWADDR,
        WVALID => s_axi_s_axilite_WVALID,
        WREADY => s_axi_s_axilite_WREADY,
        WDATA => s_axi_s_axilite_WDATA,
        WSTRB => s_axi_s_axilite_WSTRB,
        ARVALID => s_axi_s_axilite_ARVALID,
        ARREADY => s_axi_s_axilite_ARREADY,
        ARADDR => s_axi_s_axilite_ARADDR,
        RVALID => s_axi_s_axilite_RVALID,
        RREADY => s_axi_s_axilite_RREADY,
        RDATA => s_axi_s_axilite_RDATA,
        RRESP => s_axi_s_axilite_RRESP,
        BVALID => s_axi_s_axilite_BVALID,
        BREADY => s_axi_s_axilite_BREADY,
        BRESP => s_axi_s_axilite_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => arraycopy_axis_s_axilite_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        M => M);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_B_TREADY assign process. --
    ap_reg_ioackin_B_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = ap_sig_ioackin_B_TREADY))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((tmp_reg_356 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (not((tmp_reg_356 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))))) then 
                    ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = B_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((tmp_reg_356 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_logic_1 = B_TREADY)))) then 
                    ap_reg_ioackin_B_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (tmp_fu_298_p2 = ap_const_lv1_0) and not(((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (not((tmp_reg_356 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = ap_sig_ioackin_B_TREADY)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((tmp_fu_298_p2 = ap_const_lv1_0)) and not(((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (not((tmp_reg_356 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = ap_sig_ioackin_B_TREADY))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (tmp_fu_298_p2 = ap_const_lv1_0) and not(((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (not((tmp_reg_356 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_163 assign process. --
    i_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((tmp_fu_298_p2 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (not((tmp_reg_356 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
                i_reg_163 <= i_1_fu_303_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = ap_sig_ioackin_B_TREADY)))) then 
                i_reg_163 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_92))) then
                M_assign_reg_351 <= M_assign_fu_290_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_92)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((tmp_fu_298_p2 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (not((tmp_reg_356 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))))) then
                tmp_data_V_fu_86 <= A_TDATA;
                tmp_dest_V_fu_110 <= A_TDEST;
                tmp_id_V_fu_106 <= A_TID;
                tmp_keep_V_fu_90 <= A_TKEEP;
                tmp_last_V_fu_102 <= A_TLAST;
                tmp_strb_V_fu_94 <= A_TSTRB;
                tmp_user_V_fu_98 <= A_TUSER;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (not((tmp_reg_356 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                tmp_reg_356 <= tmp_fu_298_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_92, tmp_fu_298_p2, tmp_reg_356, ap_sig_bdd_108, ap_reg_ppiten_pp0_it0, ap_sig_ioackin_B_TREADY, ap_reg_ppiten_pp0_it1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_92)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_B_TREADY))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if (not(((tmp_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (not((tmp_reg_356 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif (((tmp_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (not((tmp_reg_356 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st5_fsm_3 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- A_TREADY assign process. --
    A_TREADY_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_92, tmp_fu_298_p2, tmp_reg_356, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_108, ap_reg_ppiten_pp0_it0, ap_sig_ioackin_B_TREADY, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_92)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((tmp_fu_298_p2 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or (not((tmp_reg_356 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))))) then 
            A_TREADY <= ap_const_logic_1;
        else 
            A_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    B_TDATA <= tmp_data_V_fu_86;
    B_TDEST <= tmp_dest_V_fu_110;
    B_TID <= tmp_id_V_fu_106;
    B_TKEEP <= tmp_keep_V_fu_90;
    B_TLAST <= tmp_last_V_fu_102;
    B_TSTRB <= tmp_strb_V_fu_94;
    B_TUSER <= tmp_user_V_fu_98;

    -- B_TVALID assign process. --
    B_TVALID_assign_proc : process(tmp_reg_356, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_108, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_st2_fsm_1, ap_reg_ioackin_B_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_0 = ap_reg_ioackin_B_TREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((tmp_reg_356 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_108 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_logic_0 = ap_reg_ioackin_B_TREADY)))) then 
            B_TVALID <= ap_const_logic_1;
        else 
            B_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    M_assign_fu_290_p3 <= 
        ap_const_lv6_20 when (or_cond_fu_280_p2(0) = '1') else 
        tmp_3_fu_286_p1;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st5_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st5_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_108 assign process. --
    ap_sig_bdd_108_assign_proc : process(A_TVALID, tmp_fu_298_p2)
    begin
                ap_sig_bdd_108 <= ((A_TVALID = ap_const_logic_0) and not((tmp_fu_298_p2 = ap_const_lv1_0)));
    end process;


    -- ap_sig_bdd_133 assign process. --
    ap_sig_bdd_133_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_133 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_309 assign process. --
    ap_sig_bdd_309_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_309 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_45 assign process. --
    ap_sig_bdd_45_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_45 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_92 assign process. --
    ap_sig_bdd_92_assign_proc : process(ap_start, A_TVALID)
    begin
                ap_sig_bdd_92 <= ((A_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_45)
    begin
        if (ap_sig_bdd_45) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_133)
    begin
        if (ap_sig_bdd_133) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_3 assign process. --
    ap_sig_cseq_ST_st5_fsm_3_assign_proc : process(ap_sig_bdd_309)
    begin
        if (ap_sig_bdd_309) then 
            ap_sig_cseq_ST_st5_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_B_TREADY assign process. --
    ap_sig_ioackin_B_TREADY_assign_proc : process(B_TREADY, ap_reg_ioackin_B_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_B_TREADY)) then 
            ap_sig_ioackin_B_TREADY <= B_TREADY;
        else 
            ap_sig_ioackin_B_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    arraycopy_axis_s_axilite_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    i_1_fu_303_p2 <= std_logic_vector(unsigned(i_reg_163) + unsigned(ap_const_lv6_1));
    or_cond_fu_280_p2 <= (tmp_1_fu_266_p3 or tmp_2_fu_274_p2);
    tmp_1_fu_266_p3 <= M(31 downto 31);
    tmp_2_fu_274_p2 <= "1" when (signed(M) > signed(ap_const_lv32_20)) else "0";
    tmp_3_fu_286_p1 <= M(6 - 1 downto 0);
    tmp_fu_298_p2 <= "1" when (unsigned(i_reg_163) < unsigned(M_assign_reg_351)) else "0";
end behav;
