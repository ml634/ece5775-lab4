-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2_hlssdsoc
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity img_process is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rgb_data_in_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rgb_data_in_empty_n : IN STD_LOGIC;
    rgb_data_in_read : OUT STD_LOGIC;
    rgb_data_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    rgb_data_out_full_n : IN STD_LOGIC;
    rgb_data_out_write : OUT STD_LOGIC;
    isobelInvert : IN STD_LOGIC_VECTOR (31 downto 0);
    iminsobelSensitivity : IN STD_LOGIC_VECTOR (31 downto 0);
    imaxsobelSensitivity : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of img_process is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "img_process,hls_ip_2015_2_hlssdsoc,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.950000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.050000,HLS_SYN_LAT=21687431,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=3,HLS_SYN_FF=581,HLS_SYN_LUT=795}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_pp1_stg0_fsm_4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_pp1_stg1_fsm_5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_pp1_stg2_fsm_6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_pp2_stg0_fsm_7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_st18_fsm_8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_st19_fsm_9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_pp3_stg0_fsm_10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_pp3_stg1_fsm_11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_pp3_stg2_fsm_12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_st27_fsm_13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_pp4_stg0_fsm_14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_pp4_stg1_fsm_15 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_pp4_stg2_fsm_16 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_pp4_stg3_fsm_17 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_st39_fsm_18 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_st40_fsm_19 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_st41_fsm_20 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_st42_fsm_21 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_pp5_stg0_fsm_22 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_st45_fsm_23 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv11_7FE : STD_LOGIC_VECTOR (10 downto 0) := "11111111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv21_2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_const_lv12_FF : STD_LOGIC_VECTOR (11 downto 0) := "000011111111";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_42 : BOOLEAN;
    signal line_buffer_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal line_buffer_ce0 : STD_LOGIC;
    signal line_buffer_we0 : STD_LOGIC;
    signal line_buffer_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal line_buffer_ce1 : STD_LOGIC;
    signal line_buffer_we1 : STD_LOGIC;
    signal line_buffer_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_j_reg_295 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_ppstg_pix_j_reg_295_pp0_it1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_83 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal pix_j_1_reg_307 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_01_rec_reg_318 : STD_LOGIC_VECTOR (11 downto 0);
    signal pix_j_3_reg_341 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_ppstg_pix_j_3_reg_341_pp3_it1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_pp3_stg0_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_103 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it2 : STD_LOGIC := '0';
    signal pix_j_4_reg_353 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_12_pn_rec_reg_365 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_34_rec_reg_388 : STD_LOGIC_VECTOR (11 downto 0);
    signal reg_427 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_reg_1284 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_128 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal exitcond1_reg_1313 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_1365 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_431 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp4_stg1_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_150 : BOOLEAN;
    signal ap_reg_ppiten_pp4_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it2 : STD_LOGIC := '0';
    signal exitcond6_reg_1394 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp4_stg3_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_166 : BOOLEAN;
    signal ap_sig_cseq_ST_st41_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_1284_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_j_2_fu_449_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pix_j_2_reg_1288 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_200 : BOOLEAN;
    signal tmp6_fu_491_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp6_reg_1298 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_210 : BOOLEAN;
    signal ap_sig_bdd_214 : BOOLEAN;
    signal grp_fu_1255_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp9_reg_1303 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i_reg_1308 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_1313_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_j_6_fu_564_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pix_j_6_reg_1317 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buffer_addr1_fu_570_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buffer_addr1_reg_1322 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_ppstg_line_buffer_addr1_reg_1322_pp1_it1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_pp1_stg2_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_244 : BOOLEAN;
    signal tmp5_fu_612_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp5_reg_1332 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_pp1_stg1_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_254 : BOOLEAN;
    signal ap_sig_bdd_257 : BOOLEAN;
    signal grp_fu_1247_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp12_reg_1337 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i1_reg_1342 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_1347 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_275 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_282 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal p_rec3_fu_684_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_cast_fu_695_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_cast_reg_1356 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_299 : BOOLEAN;
    signal exitcond3_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_308 : BOOLEAN;
    signal exitcond4_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond4_reg_1365_pp3_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_j_7_fu_715_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pix_j_7_reg_1369 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_pp3_stg2_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_323 : BOOLEAN;
    signal tmp14_fu_757_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp14_reg_1379 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_pp3_stg1_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_333 : BOOLEAN;
    signal ap_sig_bdd_336 : BOOLEAN;
    signal grp_fu_1239_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp17_reg_1384 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i2_reg_1389 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond6_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp4_stg0_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_353 : BOOLEAN;
    signal ap_reg_ppstg_exitcond6_reg_1394_pp4_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond6_reg_1394_pp4_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_23_rec_fu_838_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_23_rec_reg_1398 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_fu_844_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_reg_1403 : STD_LOGIC_VECTOR (10 downto 0);
    signal pix_j_9_fu_855_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal pix_j_9_reg_1414 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_pp4_stg2_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_383 : BOOLEAN;
    signal ap_sig_bdd_387 : BOOLEAN;
    signal tmp_fu_910_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_reg_1441 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_957_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_reg_1451 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_fu_981_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_reg_1466 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_weight_fu_1008_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_weight_reg_1471 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_1022_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_reg_1478 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_24_fu_1037_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_reg_1483 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_weight_fu_1057_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_weight_reg_1488 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_weight_1_fu_1073_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_weight_1_reg_1494 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_1080_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_1499 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge_weight_fu_1104_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal edge_weight_reg_1504 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_39_fu_1110_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_reg_1509 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_val1_fu_1124_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_val1_reg_1514 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_1520 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_1526 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge_val_1_fu_1163_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_val_1_reg_1531 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_j_8_fu_1184_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal pix_j_8_reg_1541 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st40_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_442 : BOOLEAN;
    signal line_buffer_addr_11_reg_1546 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond5_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_i_1_fu_1216_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond8_fu_1227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_reg_1562 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp5_stg0_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_462 : BOOLEAN;
    signal ap_reg_ppiten_pp5_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_468 : BOOLEAN;
    signal ap_reg_ppiten_pp5_it1 : STD_LOGIC := '0';
    signal p_rec_fu_1233_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_509 : BOOLEAN;
    signal pix_j_phi_fu_299_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal pix_j_1_phi_fu_311_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal pix_i_reg_329 : STD_LOGIC_VECTOR (10 downto 0);
    signal pix_j_3_phi_fu_345_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal pix_j_4_phi_fu_357_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_12_pn_rec_phi_fu_369_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal pix_j_5_reg_376 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_553 : BOOLEAN;
    signal ap_sig_cseq_ST_st42_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_561 : BOOLEAN;
    signal tmp_5_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_861_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_963_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_1198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_1211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_1222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_1168_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_547_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_1_fu_668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_fu_813_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_B_fu_455_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_417_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_i_fu_463_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_i_fu_475_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_i_cast_fu_471_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_i_cast_fu_483_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_i_cast1_fu_487_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp8_fu_497_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_i_fu_507_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_i_cast_fu_515_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp20_cast_fu_519_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_fu_522_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp21_cast_fu_528_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i_fu_531_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_B_1_fu_576_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_i1_fu_584_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_i1_fu_596_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_i1_cast_fu_604_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_i1_cast_fu_592_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_i1_cast1_fu_608_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp11_fu_618_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_i1_fu_628_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp24_cast_fu_640_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_i1_cast_fu_636_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp25_cast_fu_649_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_fu_643_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i1_fu_652_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal not_tmp_8_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_B_2_fu_721_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_i2_fu_729_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_i2_fu_741_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_i2_cast_fu_737_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_i2_cast_fu_749_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_i2_cast1_fu_753_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp16_fu_763_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_i2_fu_773_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_i2_cast_fu_781_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp28_cast_fu_785_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp15_fu_788_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp29_cast_fu_794_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i2_fu_797_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_addr2_fu_819_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_addr5_fu_866_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_addr6_fu_878_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_addr7_fu_898_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_894_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_cast_fu_890_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buffer_addr8_fu_916_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_936_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_cast_fu_932_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_cast_fu_928_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_fu_947_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_cast_fu_943_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_cast_cast_fu_953_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_addr10_fu_968_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_987_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_20_fu_1003_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_cast1_fu_995_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_cast_fu_1014_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_28_cast_fu_1018_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_cast_fu_1028_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_cast_fu_991_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_1031_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_cast_fu_999_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_38_fu_1043_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_cast_fu_1050_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_cast_cast_fu_1054_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1068_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_fu_1089_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_weight_1_fu_1094_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_weight_1_cast_fu_1086_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal y_weight_1_cast_fu_1100_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_29_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge_val_fu_1119_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_1132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_1152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_edge_val_fu_1145_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_val_2_fu_1156_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_addr11_fu_1190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_addr13_fu_1203_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1239_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1239_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1239_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1247_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1247_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1247_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1255_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1255_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1239_ce : STD_LOGIC;
    signal grp_fu_1247_ce : STD_LOGIC;
    signal grp_fu_1255_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st45_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_1217 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1239_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1239_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1247_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1247_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1255_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1255_p20 : STD_LOGIC_VECTOR (12 downto 0);

    component img_process_mac_muladd_6ns_8ns_9ns_13_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component img_process_line_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    line_buffer_U : component img_process_line_buffer
    generic map (
        DataWidth => 8,
        AddressRange => 6144,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buffer_address0,
        ce0 => line_buffer_ce0,
        we0 => line_buffer_we0,
        d0 => line_buffer_d0,
        q0 => line_buffer_q0,
        address1 => line_buffer_address1,
        ce1 => line_buffer_ce1,
        we1 => line_buffer_we1,
        d1 => line_buffer_d1,
        q1 => line_buffer_q1);

    img_process_mac_muladd_6ns_8ns_9ns_13_3_U1 : component img_process_mac_muladd_6ns_8ns_9ns_13_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1239_p0,
        din1 => grp_fu_1239_p1,
        din2 => grp_fu_1239_p2,
        ce => grp_fu_1239_ce,
        dout => grp_fu_1239_p3);

    img_process_mac_muladd_6ns_8ns_9ns_13_3_U2 : component img_process_mac_muladd_6ns_8ns_9ns_13_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1247_p0,
        din1 => grp_fu_1247_p1,
        din2 => grp_fu_1247_p2,
        ce => grp_fu_1247_ce,
        dout => grp_fu_1247_p3);

    img_process_mac_muladd_6ns_8ns_9ns_13_3_U3 : component img_process_mac_muladd_6ns_8ns_9ns_13_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1255_p0,
        din1 => grp_fu_1255_p1,
        din2 => grp_fu_1255_p2,
        ce => grp_fu_1255_ce,
        dout => grp_fu_1255_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = exitcond_fu_443_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond_reg_1284 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and not((exitcond_reg_1284 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_const_lv1_0 = exitcond1_fu_558_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_443_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond1_reg_1313) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_6))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_443_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_6) and not((ap_const_lv1_0 = exitcond1_reg_1313))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_6)) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_443_p2)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_7) and not((ap_sig_bdd_282 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_lv1_0 = exitcond2_fu_678_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond1_fu_558_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_7) and not((ap_sig_bdd_282 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and (ap_const_lv1_0 = exitcond2_fu_678_p2))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond1_fu_558_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_7) and not((ap_sig_bdd_282 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_lv1_0 = exitcond2_fu_678_p2))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it0 assign process. --
    ap_reg_ppiten_pp3_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_10) and not((ap_const_lv1_0 = exitcond4_fu_709_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_9) and (ap_const_lv1_0 = exitcond3_fu_703_p2))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it1 assign process. --
    ap_reg_ppiten_pp3_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond4_reg_1365) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_12))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_9) and (ap_const_lv1_0 = exitcond3_fu_703_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_12) and not((ap_const_lv1_0 = exitcond4_reg_1365))))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it2 assign process. --
    ap_reg_ppiten_pp3_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_12)) then 
                    ap_reg_ppiten_pp3_it2 <= ap_reg_ppiten_pp3_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_9) and (ap_const_lv1_0 = exitcond3_fu_703_p2))) then 
                    ap_reg_ppiten_pp3_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it0 assign process. --
    ap_reg_ppiten_pp4_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp4_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14) and not((ap_const_lv1_0 = exitcond6_fu_832_p2)))) then 
                    ap_reg_ppiten_pp4_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_13) and not((rgb_data_out_full_n = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp4_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it1 assign process. --
    ap_reg_ppiten_pp4_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp4_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond6_reg_1394) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg3_fsm_17))) then 
                    ap_reg_ppiten_pp4_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_13) and not((rgb_data_out_full_n = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg3_fsm_17) and not((ap_const_lv1_0 = exitcond6_reg_1394))))) then 
                    ap_reg_ppiten_pp4_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it2 assign process. --
    ap_reg_ppiten_pp4_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp4_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg3_fsm_17)) then 
                    ap_reg_ppiten_pp4_it2 <= ap_reg_ppiten_pp4_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_13) and not((rgb_data_out_full_n = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp4_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp5_it0 assign process. --
    ap_reg_ppiten_pp5_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp5_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_22) and not((ap_sig_bdd_468 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) and not((ap_const_lv1_0 = exitcond8_fu_1227_p2)))) then 
                    ap_reg_ppiten_pp5_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_9) and not((ap_const_lv1_0 = exitcond3_fu_703_p2)))) then 
                    ap_reg_ppiten_pp5_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp5_it1 assign process. --
    ap_reg_ppiten_pp5_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp5_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_22) and not((ap_sig_bdd_468 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) and (ap_const_lv1_0 = exitcond8_fu_1227_p2))) then 
                    ap_reg_ppiten_pp5_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_9) and not((ap_const_lv1_0 = exitcond3_fu_703_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_22) and not((ap_sig_bdd_468 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) and not((ap_const_lv1_0 = exitcond8_fu_1227_p2))))) then 
                    ap_reg_ppiten_pp5_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- p_01_rec_reg_318 assign process. --
    p_01_rec_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond1_fu_558_p2)))) then 
                p_01_rec_reg_318 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_282 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and (ap_const_lv1_0 = exitcond2_fu_678_p2))) then 
                p_01_rec_reg_318 <= p_rec3_fu_684_p2;
            end if; 
        end if;
    end process;

    -- p_12_pn_rec_reg_365 assign process. --
    p_12_pn_rec_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = exitcond6_reg_1394) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14))) then 
                p_12_pn_rec_reg_365 <= p_23_rec_reg_1398;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_13) and not((rgb_data_out_full_n = ap_const_logic_0)))) then 
                p_12_pn_rec_reg_365 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- p_34_rec_reg_388 assign process. --
    p_34_rec_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_9) and not((ap_const_lv1_0 = exitcond3_fu_703_p2)))) then 
                p_34_rec_reg_388 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_468 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) and (ap_const_lv1_0 = exitcond8_fu_1227_p2))) then 
                p_34_rec_reg_388 <= p_rec_fu_1233_p2;
            end if; 
        end if;
    end process;

    -- pix_i_reg_329 assign process. --
    pix_i_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_8)) then 
                pix_i_reg_329 <= ap_const_lv11_2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_19) and not((ap_const_lv1_0 = exitcond5_fu_1178_p2)))) then 
                pix_i_reg_329 <= pix_i_1_fu_1216_p2;
            end if; 
        end if;
    end process;

    -- pix_j_1_reg_307 assign process. --
    pix_j_1_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_443_p2)))) then 
                pix_j_1_reg_307 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond1_reg_1313))) then 
                pix_j_1_reg_307 <= pix_j_6_reg_1317;
            end if; 
        end if;
    end process;

    -- pix_j_3_reg_341 assign process. --
    pix_j_3_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_9) and (ap_const_lv1_0 = exitcond3_fu_703_p2))) then 
                pix_j_3_reg_341 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond4_reg_1365))) then 
                pix_j_3_reg_341 <= pix_j_7_reg_1369;
            end if; 
        end if;
    end process;

    -- pix_j_4_reg_353 assign process. --
    pix_j_4_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = exitcond6_reg_1394) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14))) then 
                pix_j_4_reg_353 <= pix_j_9_reg_1414;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_13) and not((rgb_data_out_full_n = ap_const_logic_0)))) then 
                pix_j_4_reg_353 <= ap_const_lv11_1;
            end if; 
        end if;
    end process;

    -- pix_j_5_reg_376 assign process. --
    pix_j_5_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_21)) then 
                pix_j_5_reg_376 <= pix_j_8_reg_1541;
            elsif ((not((rgb_data_out_full_n = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_18))) then 
                pix_j_5_reg_376 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- pix_j_reg_295 assign process. --
    pix_j_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_reg_1284 = ap_const_lv1_0))) then 
                pix_j_reg_295 <= pix_j_2_reg_1288;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                pix_j_reg_295 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- reg_431 assign process. --
    reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = exitcond6_reg_1394) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg3_fsm_17)) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_20))) then 
                reg_431 <= line_buffer_q1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg1_fsm_15) and (ap_const_lv1_0 = exitcond6_reg_1394))) then 
                reg_431 <= line_buffer_q0;
            end if; 
        end if;
    end process;

    -- reg_437 assign process. --
    reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = exitcond6_reg_1394) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg3_fsm_17)) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_20))) then 
                reg_437 <= line_buffer_q0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg1_fsm_15) and (ap_const_lv1_0 = exitcond6_reg_1394))) then 
                reg_437 <= line_buffer_q1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4)) then
                ap_reg_ppstg_exitcond1_reg_1313_pp1_it1 <= exitcond1_reg_1313;
                ap_reg_ppstg_line_buffer_addr1_reg_1322_pp1_it1 <= line_buffer_addr1_reg_1322;
                exitcond1_reg_1313 <= exitcond1_fu_558_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_10)) then
                ap_reg_ppstg_exitcond4_reg_1365_pp3_it1 <= exitcond4_reg_1365;
                ap_reg_ppstg_pix_j_3_reg_341_pp3_it1 <= pix_j_3_reg_341;
                exitcond4_reg_1365 <= exitcond4_fu_709_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14)) then
                ap_reg_ppstg_exitcond6_reg_1394_pp4_it1 <= exitcond6_reg_1394;
                ap_reg_ppstg_exitcond6_reg_1394_pp4_it2 <= ap_reg_ppstg_exitcond6_reg_1394_pp4_it1;
                exitcond6_reg_1394 <= exitcond6_fu_832_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_reg_1284_pp0_it1 <= exitcond_reg_1284;
                ap_reg_ppstg_pix_j_reg_295_pp0_it1 <= pix_j_reg_295;
                exitcond_reg_1284 <= exitcond_fu_443_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg3_fsm_17) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_1394_pp4_it1))) then
                edge_val1_reg_1514 <= edge_val1_fu_1124_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg1_fsm_15) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_1394_pp4_it2))) then
                edge_val_1_reg_1531 <= edge_val_1_fu_1163_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg2_fsm_16) and not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and ap_sig_bdd_387)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_1394_pp4_it1))) then
                edge_weight_reg_1504 <= edge_weight_fu_1104_p2;
                tmp_39_reg_1509 <= tmp_39_fu_1110_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_7) and not((ap_sig_bdd_282 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                exitcond2_reg_1347 <= exitcond2_fu_678_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_22) and not((ap_sig_bdd_468 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))))) then
                exitcond8_reg_1562 <= exitcond8_fu_1227_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_558_p2))) then
                line_buffer_addr1_reg_1322 <= line_buffer_addr1_fu_570_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_19) and (ap_const_lv1_0 = exitcond5_fu_1178_p2))) then
                    line_buffer_addr_11_reg_1546(10 downto 0) <= tmp_40_fu_1198_p1(13 - 1 downto 0)(10 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14))) then
                p_23_rec_reg_1398 <= p_23_rec_fu_838_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                pix_j_2_reg_1288 <= pix_j_2_fu_449_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then
                pix_j_6_reg_1317 <= pix_j_6_fu_564_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0))) then
                pix_j_7_reg_1369 <= pix_j_7_fu_715_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_19)) then
                pix_j_8_reg_1541 <= pix_j_8_fu_1184_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14) and (ap_const_lv1_0 = exitcond6_fu_832_p2))) then
                pix_j_9_reg_1414 <= pix_j_9_fu_855_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_reg_1284 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_214))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond1_reg_1313) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_257))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond4_reg_1365) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_11) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and ap_sig_bdd_336))))) then
                pixel_fu_140 <= rgb_data_in_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_reg_1284 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_lv1_0 = exitcond1_reg_1313)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_10) and (ap_const_lv1_0 = exitcond4_reg_1365)))) then
                reg_427 <= pixel_fu_140(15 downto 8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_257)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1313_pp1_it1))) then
                tmp12_reg_1337 <= grp_fu_1247_p3;
                    tmp5_reg_1332(14 downto 1) <= tmp5_fu_612_p2(14 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_11) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and ap_sig_bdd_336)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1365_pp3_it1))) then
                    tmp14_reg_1379(14 downto 1) <= tmp14_fu_757_p2(14 downto 1);
                tmp17_reg_1384 <= grp_fu_1239_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond6_reg_1394) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14))) then
                tmp2_reg_1478 <= tmp2_fu_1022_p2;
                tmp_24_reg_1483 <= tmp_24_fu_1037_p2;
                x_weight_reg_1471 <= x_weight_fu_1008_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_214)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1284_pp0_it1))) then
                    tmp6_reg_1298(14 downto 1) <= tmp6_fu_491_p2(14 downto 1);
                tmp9_reg_1303 <= grp_fu_1255_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14) and (ap_const_lv1_0 = exitcond6_fu_832_p2))) then
                tmp_12_reg_1403 <= tmp_12_fu_844_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond6_reg_1394) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg3_fsm_17))) then
                tmp_19_reg_1451 <= tmp_19_fu_957_p2;
                tmp_21_reg_1466 <= tmp_21_fu_981_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg1_fsm_15) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_1394_pp4_it1))) then
                tmp_27_reg_1499 <= tmp_27_fu_1080_p2;
                x_weight_1_reg_1494 <= x_weight_1_fu_1073_p3;
                y_weight_reg_1488 <= y_weight_fu_1057_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_1394_pp4_it1))) then
                tmp_32_reg_1520 <= tmp_32_fu_1135_p2;
                tmp_33_reg_1526 <= tmp_33_fu_1140_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_8)) then
                tmp_9_cast_reg_1356 <= tmp_9_cast_fu_695_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_6) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1313_pp1_it1))) then
                tmp_i1_reg_1342 <= tmp_8_i1_fu_652_p2(15 downto 8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_12) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1365_pp3_it1))) then
                tmp_i2_reg_1389 <= tmp_8_i2_fu_797_p2(15 downto 8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1284_pp0_it1))) then
                tmp_i_reg_1308 <= tmp_8_i_fu_531_p2(15 downto 8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond6_reg_1394) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg2_fsm_16) and not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and ap_sig_bdd_387)))) then
                tmp_reg_1441 <= tmp_fu_910_p2;
            end if;
        end if;
    end process;
    tmp6_reg_1298(0) <= '0';
    tmp5_reg_1332(0) <= '0';
    tmp14_reg_1379(0) <= '0';
    line_buffer_addr_11_reg_1546(12 downto 11) <= "01";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, rgb_data_out_full_n, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp3_stg0_fsm_10, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it2, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ppiten_pp4_it0, ap_reg_ppiten_pp4_it1, ap_reg_ppiten_pp4_it2, exitcond_fu_443_p2, ap_sig_bdd_214, exitcond1_fu_558_p2, ap_sig_bdd_257, exitcond2_fu_678_p2, ap_reg_ppiten_pp2_it0, ap_sig_bdd_282, ap_reg_ppiten_pp2_it1, exitcond3_fu_703_p2, exitcond4_fu_709_p2, ap_sig_bdd_336, exitcond6_fu_832_p2, ap_sig_cseq_ST_pp4_stg2_fsm_16, ap_sig_bdd_387, exitcond5_fu_1178_p2, exitcond8_fu_1227_p2, ap_reg_ppiten_pp5_it0, ap_sig_bdd_468, ap_reg_ppiten_pp5_it1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_443_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_443_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_214))) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                end if;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_pp1_stg0_fsm_4 => 
                if ((not(((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond1_fu_558_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg1_fsm_5;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond1_fu_558_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_7;
                end if;
            when ap_ST_pp1_stg1_fsm_5 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_257))) then
                    ap_NS_fsm <= ap_ST_pp1_stg2_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg1_fsm_5;
                end if;
            when ap_ST_pp1_stg2_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
            when ap_ST_pp2_stg0_fsm_7 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_282 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_lv1_0 = exitcond2_fu_678_p2))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_7;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_282 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_lv1_0 = exitcond2_fu_678_p2)))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_7;
                end if;
            when ap_ST_st18_fsm_8 => 
                ap_NS_fsm <= ap_ST_st19_fsm_9;
            when ap_ST_st19_fsm_9 => 
                if ((ap_const_lv1_0 = exitcond3_fu_703_p2)) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_pp5_stg0_fsm_22;
                end if;
            when ap_ST_pp3_stg0_fsm_10 => 
                if ((not(((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_const_lv1_0 = exitcond4_fu_709_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg1_fsm_11;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_const_lv1_0 = exitcond4_fu_709_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))) then
                    ap_NS_fsm <= ap_ST_st27_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st27_fsm_13;
                end if;
            when ap_ST_pp3_stg1_fsm_11 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and ap_sig_bdd_336))) then
                    ap_NS_fsm <= ap_ST_pp3_stg2_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_pp3_stg1_fsm_11;
                end if;
            when ap_ST_pp3_stg2_fsm_12 => 
                ap_NS_fsm <= ap_ST_pp3_stg0_fsm_10;
            when ap_ST_st27_fsm_13 => 
                if (not((rgb_data_out_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp4_stg0_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st27_fsm_13;
                end if;
            when ap_ST_pp4_stg0_fsm_14 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and not((ap_const_lv1_0 = exitcond6_fu_832_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp4_it1))))) then
                    ap_NS_fsm <= ap_ST_pp4_stg1_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_18;
                end if;
            when ap_ST_pp4_stg1_fsm_15 => 
                ap_NS_fsm <= ap_ST_pp4_stg2_fsm_16;
            when ap_ST_pp4_stg2_fsm_16 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and ap_sig_bdd_387)) and not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg2_fsm_16) and not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and ap_sig_bdd_387)) and not((ap_const_logic_1 = ap_reg_ppiten_pp4_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp4_stg3_fsm_17;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg2_fsm_16) and not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and ap_sig_bdd_387)) and not((ap_const_logic_1 = ap_reg_ppiten_pp4_it1)))) then
                    ap_NS_fsm <= ap_ST_st39_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_pp4_stg2_fsm_16;
                end if;
            when ap_ST_pp4_stg3_fsm_17 => 
                ap_NS_fsm <= ap_ST_pp4_stg0_fsm_14;
            when ap_ST_st39_fsm_18 => 
                if (not((rgb_data_out_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st40_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_18;
                end if;
            when ap_ST_st40_fsm_19 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_1178_p2))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st41_fsm_20;
                end if;
            when ap_ST_st41_fsm_20 => 
                ap_NS_fsm <= ap_ST_st42_fsm_21;
            when ap_ST_st42_fsm_21 => 
                ap_NS_fsm <= ap_ST_st40_fsm_19;
            when ap_ST_pp5_stg0_fsm_22 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_468 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) and not((ap_const_lv1_0 = exitcond8_fu_1227_p2))))) then
                    ap_NS_fsm <= ap_ST_pp5_stg0_fsm_22;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not((ap_sig_bdd_468 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) and not((ap_const_lv1_0 = exitcond8_fu_1227_p2)))) then
                    ap_NS_fsm <= ap_ST_st45_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_pp5_stg0_fsm_22;
                end if;
            when ap_ST_st45_fsm_23 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st45_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_23)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st45_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_103 assign process. --
    ap_sig_bdd_103_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_103 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_1217 assign process. --
    ap_sig_bdd_1217_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1217 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_128 assign process. --
    ap_sig_bdd_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_128 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_150 assign process. --
    ap_sig_bdd_150_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_150 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_166 assign process. --
    ap_sig_bdd_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_166 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_200 assign process. --
    ap_sig_bdd_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_200 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_210 assign process. --
    ap_sig_bdd_210_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_210 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_214 assign process. --
    ap_sig_bdd_214_assign_proc : process(rgb_data_in_empty_n, exitcond_reg_1284)
    begin
                ap_sig_bdd_214 <= ((exitcond_reg_1284 = ap_const_lv1_0) and (rgb_data_in_empty_n = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_244 assign process. --
    ap_sig_bdd_244_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_244 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_254 assign process. --
    ap_sig_bdd_254_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_254 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_257 assign process. --
    ap_sig_bdd_257_assign_proc : process(rgb_data_in_empty_n, exitcond1_reg_1313)
    begin
                ap_sig_bdd_257 <= ((ap_const_lv1_0 = exitcond1_reg_1313) and (rgb_data_in_empty_n = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_275 assign process. --
    ap_sig_bdd_275_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_275 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_282 assign process. --
    ap_sig_bdd_282_assign_proc : process(rgb_data_out_full_n, exitcond2_reg_1347)
    begin
                ap_sig_bdd_282 <= ((rgb_data_out_full_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond2_reg_1347));
    end process;


    -- ap_sig_bdd_299 assign process. --
    ap_sig_bdd_299_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_299 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_308 assign process. --
    ap_sig_bdd_308_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_308 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_323 assign process. --
    ap_sig_bdd_323_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_323 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_333 assign process. --
    ap_sig_bdd_333_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_333 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_336 assign process. --
    ap_sig_bdd_336_assign_proc : process(rgb_data_in_empty_n, exitcond4_reg_1365)
    begin
                ap_sig_bdd_336 <= ((ap_const_lv1_0 = exitcond4_reg_1365) and (rgb_data_in_empty_n = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_353 assign process. --
    ap_sig_bdd_353_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_353 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_383 assign process. --
    ap_sig_bdd_383_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_383 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_387 assign process. --
    ap_sig_bdd_387_assign_proc : process(rgb_data_out_full_n, ap_reg_ppstg_exitcond6_reg_1394_pp4_it2)
    begin
                ap_sig_bdd_387 <= ((rgb_data_out_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_1394_pp4_it2));
    end process;


    -- ap_sig_bdd_42 assign process. --
    ap_sig_bdd_42_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_42 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_442 assign process. --
    ap_sig_bdd_442_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_442 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_462 assign process. --
    ap_sig_bdd_462_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_462 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_468 assign process. --
    ap_sig_bdd_468_assign_proc : process(rgb_data_out_full_n, exitcond8_reg_1562)
    begin
                ap_sig_bdd_468 <= ((rgb_data_out_full_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond8_reg_1562));
    end process;


    -- ap_sig_bdd_509 assign process. --
    ap_sig_bdd_509_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_509 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_553 assign process. --
    ap_sig_bdd_553_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_553 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_561 assign process. --
    ap_sig_bdd_561_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_561 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_83 assign process. --
    ap_sig_bdd_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_83 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_83)
    begin
        if (ap_sig_bdd_83) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_210)
    begin
        if (ap_sig_bdd_210) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_bdd_200)
    begin
        if (ap_sig_bdd_200) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_4_assign_proc : process(ap_sig_bdd_128)
    begin
        if (ap_sig_bdd_128) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg1_fsm_5 assign process. --
    ap_sig_cseq_ST_pp1_stg1_fsm_5_assign_proc : process(ap_sig_bdd_254)
    begin
        if (ap_sig_bdd_254) then 
            ap_sig_cseq_ST_pp1_stg1_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg1_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg2_fsm_6 assign process. --
    ap_sig_cseq_ST_pp1_stg2_fsm_6_assign_proc : process(ap_sig_bdd_244)
    begin
        if (ap_sig_bdd_244) then 
            ap_sig_cseq_ST_pp1_stg2_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg2_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_7 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_7_assign_proc : process(ap_sig_bdd_275)
    begin
        if (ap_sig_bdd_275) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg0_fsm_10 assign process. --
    ap_sig_cseq_ST_pp3_stg0_fsm_10_assign_proc : process(ap_sig_bdd_103)
    begin
        if (ap_sig_bdd_103) then 
            ap_sig_cseq_ST_pp3_stg0_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg0_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg1_fsm_11 assign process. --
    ap_sig_cseq_ST_pp3_stg1_fsm_11_assign_proc : process(ap_sig_bdd_333)
    begin
        if (ap_sig_bdd_333) then 
            ap_sig_cseq_ST_pp3_stg1_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg1_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg2_fsm_12 assign process. --
    ap_sig_cseq_ST_pp3_stg2_fsm_12_assign_proc : process(ap_sig_bdd_323)
    begin
        if (ap_sig_bdd_323) then 
            ap_sig_cseq_ST_pp3_stg2_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg2_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp4_stg0_fsm_14 assign process. --
    ap_sig_cseq_ST_pp4_stg0_fsm_14_assign_proc : process(ap_sig_bdd_353)
    begin
        if (ap_sig_bdd_353) then 
            ap_sig_cseq_ST_pp4_stg0_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp4_stg0_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp4_stg1_fsm_15 assign process. --
    ap_sig_cseq_ST_pp4_stg1_fsm_15_assign_proc : process(ap_sig_bdd_150)
    begin
        if (ap_sig_bdd_150) then 
            ap_sig_cseq_ST_pp4_stg1_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp4_stg1_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp4_stg2_fsm_16 assign process. --
    ap_sig_cseq_ST_pp4_stg2_fsm_16_assign_proc : process(ap_sig_bdd_383)
    begin
        if (ap_sig_bdd_383) then 
            ap_sig_cseq_ST_pp4_stg2_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp4_stg2_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp4_stg3_fsm_17 assign process. --
    ap_sig_cseq_ST_pp4_stg3_fsm_17_assign_proc : process(ap_sig_bdd_166)
    begin
        if (ap_sig_bdd_166) then 
            ap_sig_cseq_ST_pp4_stg3_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp4_stg3_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp5_stg0_fsm_22 assign process. --
    ap_sig_cseq_ST_pp5_stg0_fsm_22_assign_proc : process(ap_sig_bdd_462)
    begin
        if (ap_sig_bdd_462) then 
            ap_sig_cseq_ST_pp5_stg0_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp5_stg0_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_8 assign process. --
    ap_sig_cseq_ST_st18_fsm_8_assign_proc : process(ap_sig_bdd_299)
    begin
        if (ap_sig_bdd_299) then 
            ap_sig_cseq_ST_st18_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_9 assign process. --
    ap_sig_cseq_ST_st19_fsm_9_assign_proc : process(ap_sig_bdd_308)
    begin
        if (ap_sig_bdd_308) then 
            ap_sig_cseq_ST_st19_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_42)
    begin
        if (ap_sig_bdd_42) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_13 assign process. --
    ap_sig_cseq_ST_st27_fsm_13_assign_proc : process(ap_sig_bdd_509)
    begin
        if (ap_sig_bdd_509) then 
            ap_sig_cseq_ST_st27_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_18 assign process. --
    ap_sig_cseq_ST_st39_fsm_18_assign_proc : process(ap_sig_bdd_553)
    begin
        if (ap_sig_bdd_553) then 
            ap_sig_cseq_ST_st39_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_19 assign process. --
    ap_sig_cseq_ST_st40_fsm_19_assign_proc : process(ap_sig_bdd_442)
    begin
        if (ap_sig_bdd_442) then 
            ap_sig_cseq_ST_st40_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_20 assign process. --
    ap_sig_cseq_ST_st41_fsm_20_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_st41_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st42_fsm_21 assign process. --
    ap_sig_cseq_ST_st42_fsm_21_assign_proc : process(ap_sig_bdd_561)
    begin
        if (ap_sig_bdd_561) then 
            ap_sig_cseq_ST_st42_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st45_fsm_23 assign process. --
    ap_sig_cseq_ST_st45_fsm_23_assign_proc : process(ap_sig_bdd_1217)
    begin
        if (ap_sig_bdd_1217) then 
            ap_sig_cseq_ST_st45_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;

    edge_val1_fu_1124_p3 <= 
        edge_val_fu_1119_p2 when (tmp_29_fu_1114_p2(0) = '1') else 
        ap_const_lv8_0;
    edge_val_1_fu_1163_p2 <= (edge_val_2_fu_1156_p3 xor tmp_9_cast_reg_1356);
    edge_val_2_fu_1156_p3 <= 
        p_edge_val_fu_1145_p3 when (tmp_34_fu_1152_p2(0) = '1') else 
        edge_val1_reg_1514;
    edge_val_fu_1119_p2 <= (tmp_39_reg_1509 xor ap_const_lv8_FF);
    edge_weight_fu_1104_p2 <= std_logic_vector(signed(x_weight_1_cast_fu_1086_p1) + signed(y_weight_1_cast_fu_1100_p1));
    exitcond1_fu_558_p2 <= "1" when (pix_j_1_phi_fu_311_p4 = ap_const_lv12_800) else "0";
    exitcond2_fu_678_p2 <= "1" when (p_01_rec_reg_318 = ap_const_lv12_800) else "0";
    exitcond3_fu_703_p2 <= "1" when (pix_i_reg_329 = ap_const_lv11_438) else "0";
    exitcond4_fu_709_p2 <= "1" when (pix_j_3_phi_fu_345_p4 = ap_const_lv12_800) else "0";
    exitcond5_fu_1178_p2 <= "1" when (pix_j_5_reg_376 = ap_const_lv11_780) else "0";
    exitcond6_fu_832_p2 <= "1" when (p_12_pn_rec_phi_fu_369_p4 = ap_const_lv11_7FE) else "0";
    exitcond8_fu_1227_p2 <= "1" when (p_34_rec_reg_388 = ap_const_lv12_800) else "0";
    exitcond_fu_443_p2 <= "1" when (pix_j_phi_fu_299_p4 = ap_const_lv12_800) else "0";

    -- grp_fu_1239_ce assign process. --
    grp_fu_1239_ce_assign_proc : process(ap_sig_cseq_ST_pp3_stg0_fsm_10, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_12, ap_sig_cseq_ST_pp3_stg1_fsm_11, ap_sig_bdd_336)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_12) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_11) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and ap_sig_bdd_336))))) then 
            grp_fu_1239_ce <= ap_const_logic_1;
        else 
            grp_fu_1239_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1239_p0 <= ap_const_lv13_19(6 - 1 downto 0);
    grp_fu_1239_p1 <= grp_fu_1239_p10(8 - 1 downto 0);
    grp_fu_1239_p10 <= std_logic_vector(resize(unsigned(in_B_2_fu_721_p1),13));
    grp_fu_1239_p2 <= grp_fu_1239_p20(9 - 1 downto 0);
    grp_fu_1239_p20 <= std_logic_vector(resize(unsigned(tmp16_fu_763_p2),13));

    -- grp_fu_1247_ce assign process. --
    grp_fu_1247_ce_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_6, ap_sig_cseq_ST_pp1_stg1_fsm_5, ap_sig_bdd_257)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_6) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_257))))) then 
            grp_fu_1247_ce <= ap_const_logic_1;
        else 
            grp_fu_1247_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1247_p0 <= ap_const_lv13_19(6 - 1 downto 0);
    grp_fu_1247_p1 <= grp_fu_1247_p10(8 - 1 downto 0);
    grp_fu_1247_p10 <= std_logic_vector(resize(unsigned(in_B_1_fu_576_p1),13));
    grp_fu_1247_p2 <= grp_fu_1247_p20(9 - 1 downto 0);
    grp_fu_1247_p20 <= std_logic_vector(resize(unsigned(tmp11_fu_618_p2),13));

    -- grp_fu_1255_ce assign process. --
    grp_fu_1255_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_214)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_214))))) then 
            grp_fu_1255_ce <= ap_const_logic_1;
        else 
            grp_fu_1255_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1255_p0 <= ap_const_lv13_19(6 - 1 downto 0);
    grp_fu_1255_p1 <= grp_fu_1255_p10(8 - 1 downto 0);
    grp_fu_1255_p10 <= std_logic_vector(resize(unsigned(in_B_fu_455_p1),13));
    grp_fu_1255_p2 <= grp_fu_1255_p20(9 - 1 downto 0);
    grp_fu_1255_p20 <= std_logic_vector(resize(unsigned(tmp8_fu_497_p2),13));
    grp_fu_417_p4 <= pixel_fu_140(23 downto 16);
    in_B_1_fu_576_p1 <= pixel_fu_140(8 - 1 downto 0);
    in_B_2_fu_721_p1 <= pixel_fu_140(8 - 1 downto 0);
    in_B_fu_455_p1 <= pixel_fu_140(8 - 1 downto 0);
    line_buffer_addr10_fu_968_p3 <= (ap_const_lv21_2 & pix_j_4_reg_353);
    line_buffer_addr11_fu_1190_p3 <= (ap_const_lv21_1 & pix_j_5_reg_376);
    line_buffer_addr13_fu_1203_p3 <= (ap_const_lv21_2 & pix_j_5_reg_376);
    line_buffer_addr1_fu_570_p2 <= (pix_j_1_phi_fu_311_p4 xor ap_const_lv12_800);
    line_buffer_addr2_fu_819_p3 <= (ap_const_lv20_1 & ap_reg_ppstg_pix_j_3_reg_341_pp3_it1);
    line_buffer_addr5_fu_866_p3 <= (ap_const_lv21_1 & tmp_12_reg_1403);
    line_buffer_addr6_fu_878_p3 <= (ap_const_lv21_1 & pix_j_9_reg_1414);
    line_buffer_addr7_fu_898_p3 <= (ap_const_lv21_2 & tmp_12_reg_1403);
    line_buffer_addr8_fu_916_p3 <= (ap_const_lv21_2 & pix_j_9_reg_1414);

    -- line_buffer_address0 assign process. --
    line_buffer_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp3_stg0_fsm_10, ap_reg_ppiten_pp3_it2, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp4_stg1_fsm_15, ap_reg_ppiten_pp4_it0, ap_sig_cseq_ST_pp4_stg3_fsm_17, ap_sig_cseq_ST_pp4_stg0_fsm_14, ap_sig_cseq_ST_pp4_stg2_fsm_16, ap_sig_cseq_ST_st40_fsm_19, line_buffer_addr_11_reg_1546, ap_sig_cseq_ST_st42_fsm_21, tmp_5_fu_553_p1, tmp_3_fu_674_p1, tmp_10_fu_827_p1, tmp_13_fu_850_p1, tmp_16_fu_885_p1, tmp_30_fu_923_p1, tmp_37_fu_976_p1, tmp_42_fu_1211_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_21)) then 
            line_buffer_address0 <= line_buffer_addr_11_reg_1546;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) then 
            line_buffer_address0 <= tmp_10_fu_827_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) then 
            line_buffer_address0 <= tmp_3_fu_674_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
            line_buffer_address0 <= tmp_5_fu_553_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_19)) then 
            line_buffer_address0 <= tmp_42_fu_1211_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg3_fsm_17))) then 
            line_buffer_address0 <= tmp_37_fu_976_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg2_fsm_16))) then 
            line_buffer_address0 <= tmp_30_fu_923_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg1_fsm_15) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0))) then 
            line_buffer_address0 <= tmp_16_fu_885_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14))) then 
            line_buffer_address0 <= tmp_13_fu_850_p1(13 - 1 downto 0);
        else 
            line_buffer_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- line_buffer_address1 assign process. --
    line_buffer_address1_assign_proc : process(ap_sig_cseq_ST_pp4_stg1_fsm_15, ap_reg_ppiten_pp4_it0, ap_sig_cseq_ST_pp4_stg3_fsm_17, ap_sig_cseq_ST_pp4_stg0_fsm_14, ap_sig_cseq_ST_pp4_stg2_fsm_16, ap_sig_cseq_ST_st40_fsm_19, ap_sig_cseq_ST_st42_fsm_21, tmp_14_fu_861_p1, tmp_15_fu_873_p1, tmp_17_fu_905_p1, tmp_36_fu_963_p1, tmp_40_fu_1198_p1, tmp_41_fu_1222_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_21)) then 
            line_buffer_address1 <= tmp_41_fu_1222_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_19)) then 
            line_buffer_address1 <= tmp_40_fu_1198_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg3_fsm_17))) then 
            line_buffer_address1 <= tmp_36_fu_963_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg2_fsm_16))) then 
            line_buffer_address1 <= tmp_17_fu_905_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg1_fsm_15) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0))) then 
            line_buffer_address1 <= tmp_15_fu_873_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14))) then 
            line_buffer_address1 <= tmp_14_fu_861_p1(13 - 1 downto 0);
        else 
            line_buffer_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- line_buffer_ce0 assign process. --
    line_buffer_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp3_stg0_fsm_10, ap_reg_ppiten_pp3_it2, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp4_stg1_fsm_15, ap_reg_ppiten_pp4_it0, ap_reg_ppiten_pp4_it2, ap_sig_cseq_ST_pp4_stg3_fsm_17, ap_sig_cseq_ST_pp4_stg0_fsm_14, ap_sig_cseq_ST_pp4_stg2_fsm_16, ap_sig_bdd_387, ap_sig_cseq_ST_st40_fsm_19, ap_sig_cseq_ST_st42_fsm_21)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14)) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_21) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg1_fsm_15) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg3_fsm_17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg2_fsm_16) and not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and ap_sig_bdd_387))))) then 
            line_buffer_ce0 <= ap_const_logic_1;
        else 
            line_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- line_buffer_ce1 assign process. --
    line_buffer_ce1_assign_proc : process(ap_sig_cseq_ST_pp4_stg1_fsm_15, ap_reg_ppiten_pp4_it0, ap_reg_ppiten_pp4_it2, ap_sig_cseq_ST_pp4_stg3_fsm_17, ap_sig_cseq_ST_pp4_stg0_fsm_14, ap_sig_cseq_ST_pp4_stg2_fsm_16, ap_sig_bdd_387, ap_sig_cseq_ST_st40_fsm_19, ap_sig_cseq_ST_st42_fsm_21)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14)) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_21) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg1_fsm_15) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg3_fsm_17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg2_fsm_16) and not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and ap_sig_bdd_387))))) then 
            line_buffer_ce1 <= ap_const_logic_1;
        else 
            line_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- line_buffer_d0 assign process. --
    line_buffer_d0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp3_stg0_fsm_10, ap_reg_ppiten_pp3_it2, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it2, reg_437, ap_sig_cseq_ST_st42_fsm_21, y_fu_547_p2, y_1_fu_668_p2, y_2_fu_813_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_21)) then 
            line_buffer_d0 <= reg_437;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) then 
            line_buffer_d0 <= y_2_fu_813_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) then 
            line_buffer_d0 <= y_1_fu_668_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
            line_buffer_d0 <= y_fu_547_p2;
        else 
            line_buffer_d0 <= "XXXXXXXX";
        end if; 
    end process;

    line_buffer_d1 <= reg_431;

    -- line_buffer_we0 assign process. --
    line_buffer_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp3_stg0_fsm_10, ap_reg_ppiten_pp3_it2, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_exitcond_reg_1284_pp0_it1, ap_reg_ppstg_exitcond1_reg_1313_pp1_it1, ap_reg_ppstg_exitcond4_reg_1365_pp3_it1, ap_sig_cseq_ST_st42_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_21) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1284_pp0_it1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_1313_pp1_it1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1365_pp3_it1)))) then 
            line_buffer_we0 <= ap_const_logic_1;
        else 
            line_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- line_buffer_we1 assign process. --
    line_buffer_we1_assign_proc : process(ap_sig_cseq_ST_st42_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_21))) then 
            line_buffer_we1 <= ap_const_logic_1;
        else 
            line_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    not_tmp_8_fu_690_p2 <= "0" when (isobelInvert = ap_const_lv32_0) else "1";

    -- p_12_pn_rec_phi_fu_369_p4 assign process. --
    p_12_pn_rec_phi_fu_369_p4_assign_proc : process(p_12_pn_rec_reg_365, ap_reg_ppiten_pp4_it1, exitcond6_reg_1394, ap_sig_cseq_ST_pp4_stg0_fsm_14, p_23_rec_reg_1398)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = exitcond6_reg_1394) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14))) then 
            p_12_pn_rec_phi_fu_369_p4 <= p_23_rec_reg_1398;
        else 
            p_12_pn_rec_phi_fu_369_p4 <= p_12_pn_rec_reg_365;
        end if; 
    end process;

    p_23_rec_fu_838_p2 <= std_logic_vector(unsigned(p_12_pn_rec_phi_fu_369_p4) + unsigned(ap_const_lv11_1));
    p_edge_val_fu_1145_p3 <= 
        ap_const_lv8_FF when (tmp_32_reg_1520(0) = '1') else 
        ap_const_lv8_0;
    p_rec3_fu_684_p2 <= std_logic_vector(unsigned(p_01_rec_reg_318) + unsigned(ap_const_lv12_1));
    p_rec_fu_1233_p2 <= std_logic_vector(unsigned(p_34_rec_reg_388) + unsigned(ap_const_lv12_1));
    p_shl1_i1_cast_fu_592_p1 <= std_logic_vector(resize(unsigned(p_shl1_i1_fu_584_p3),15));
    p_shl1_i1_fu_584_p3 <= (grp_fu_417_p4 & ap_const_lv6_0);
    p_shl1_i2_cast_fu_737_p1 <= std_logic_vector(resize(unsigned(p_shl1_i2_fu_729_p3),15));
    p_shl1_i2_fu_729_p3 <= (grp_fu_417_p4 & ap_const_lv6_0);
    p_shl1_i_cast_fu_471_p1 <= std_logic_vector(resize(unsigned(p_shl1_i_fu_463_p3),15));
    p_shl1_i_fu_463_p3 <= (grp_fu_417_p4 & ap_const_lv6_0);
    p_shl2_i1_cast_fu_604_p1 <= std_logic_vector(resize(unsigned(p_shl2_i1_fu_596_p3),15));
    p_shl2_i1_fu_596_p3 <= (grp_fu_417_p4 & ap_const_lv1_0);
    p_shl2_i2_cast_fu_749_p1 <= std_logic_vector(resize(unsigned(p_shl2_i2_fu_741_p3),15));
    p_shl2_i2_fu_741_p3 <= (grp_fu_417_p4 & ap_const_lv1_0);
    p_shl2_i_cast_fu_483_p1 <= std_logic_vector(resize(unsigned(p_shl2_i_fu_475_p3),15));
    p_shl2_i_fu_475_p3 <= (grp_fu_417_p4 & ap_const_lv1_0);
    p_shl_i1_cast_fu_636_p1 <= std_logic_vector(resize(unsigned(p_shl_i1_fu_628_p3),16));
    p_shl_i1_fu_628_p3 <= (reg_427 & ap_const_lv7_0);
    p_shl_i2_cast_fu_781_p1 <= std_logic_vector(resize(unsigned(p_shl_i2_fu_773_p3),16));
    p_shl_i2_fu_773_p3 <= (reg_427 & ap_const_lv7_0);
    p_shl_i_cast_fu_515_p1 <= std_logic_vector(resize(unsigned(p_shl_i_fu_507_p3),16));
    p_shl_i_fu_507_p3 <= (reg_427 & ap_const_lv7_0);
    pix_i_1_fu_1216_p2 <= std_logic_vector(unsigned(pix_i_reg_329) + unsigned(ap_const_lv11_1));

    -- pix_j_1_phi_fu_311_p4 assign process. --
    pix_j_1_phi_fu_311_p4_assign_proc : process(pix_j_1_reg_307, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1, exitcond1_reg_1313, pix_j_6_reg_1317)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond1_reg_1313))) then 
            pix_j_1_phi_fu_311_p4 <= pix_j_6_reg_1317;
        else 
            pix_j_1_phi_fu_311_p4 <= pix_j_1_reg_307;
        end if; 
    end process;

    pix_j_2_fu_449_p2 <= std_logic_vector(unsigned(pix_j_phi_fu_299_p4) + unsigned(ap_const_lv12_1));

    -- pix_j_3_phi_fu_345_p4 assign process. --
    pix_j_3_phi_fu_345_p4_assign_proc : process(pix_j_3_reg_341, ap_sig_cseq_ST_pp3_stg0_fsm_10, ap_reg_ppiten_pp3_it1, exitcond4_reg_1365, pix_j_7_reg_1369)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond4_reg_1365))) then 
            pix_j_3_phi_fu_345_p4 <= pix_j_7_reg_1369;
        else 
            pix_j_3_phi_fu_345_p4 <= pix_j_3_reg_341;
        end if; 
    end process;


    -- pix_j_4_phi_fu_357_p4 assign process. --
    pix_j_4_phi_fu_357_p4_assign_proc : process(pix_j_4_reg_353, ap_reg_ppiten_pp4_it1, exitcond6_reg_1394, ap_sig_cseq_ST_pp4_stg0_fsm_14, pix_j_9_reg_1414)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = exitcond6_reg_1394) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_14))) then 
            pix_j_4_phi_fu_357_p4 <= pix_j_9_reg_1414;
        else 
            pix_j_4_phi_fu_357_p4 <= pix_j_4_reg_353;
        end if; 
    end process;

    pix_j_6_fu_564_p2 <= std_logic_vector(unsigned(pix_j_1_phi_fu_311_p4) + unsigned(ap_const_lv12_1));
    pix_j_7_fu_715_p2 <= std_logic_vector(unsigned(pix_j_3_phi_fu_345_p4) + unsigned(ap_const_lv12_1));
    pix_j_8_fu_1184_p2 <= std_logic_vector(unsigned(pix_j_5_reg_376) + unsigned(ap_const_lv11_1));
    pix_j_9_fu_855_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(pix_j_4_phi_fu_357_p4));

    -- pix_j_phi_fu_299_p4 assign process. --
    pix_j_phi_fu_299_p4_assign_proc : process(pix_j_reg_295, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, exitcond_reg_1284, pix_j_2_reg_1288)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_reg_1284 = ap_const_lv1_0))) then 
            pix_j_phi_fu_299_p4 <= pix_j_2_reg_1288;
        else 
            pix_j_phi_fu_299_p4 <= pix_j_reg_295;
        end if; 
    end process;


    -- rgb_data_in_read assign process. --
    rgb_data_in_read_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp3_it0, exitcond_reg_1284, ap_reg_ppiten_pp1_it0, exitcond1_reg_1313, exitcond4_reg_1365, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_214, ap_sig_cseq_ST_pp1_stg1_fsm_5, ap_sig_bdd_257, ap_sig_cseq_ST_pp3_stg1_fsm_11, ap_sig_bdd_336)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_reg_1284 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_214))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond1_reg_1313) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_bdd_257))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond4_reg_1365) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_11) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and ap_sig_bdd_336))))) then 
            rgb_data_in_read <= ap_const_logic_1;
        else 
            rgb_data_in_read <= ap_const_logic_0;
        end if; 
    end process;


    -- rgb_data_out_din assign process. --
    rgb_data_out_din_assign_proc : process(rgb_data_out_full_n, ap_reg_ppiten_pp4_it2, exitcond2_reg_1347, ap_sig_cseq_ST_pp2_stg0_fsm_7, ap_sig_bdd_282, ap_reg_ppiten_pp2_it1, ap_reg_ppstg_exitcond6_reg_1394_pp4_it2, ap_sig_cseq_ST_pp4_stg2_fsm_16, ap_sig_bdd_387, exitcond8_reg_1562, ap_sig_cseq_ST_pp5_stg0_fsm_22, ap_sig_bdd_468, ap_reg_ppiten_pp5_it1, ap_sig_cseq_ST_st27_fsm_13, ap_sig_cseq_ST_st39_fsm_18, tmp_35_fu_1168_p5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg2_fsm_16) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_1394_pp4_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and ap_sig_bdd_387)))) then 
            rgb_data_out_din <= tmp_35_fu_1168_p5;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_13) and not((rgb_data_out_full_n = ap_const_logic_0))) or (not((rgb_data_out_full_n = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_18)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_7) and (ap_const_lv1_0 = exitcond2_reg_1347) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_282 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_22) and (ap_const_lv1_0 = exitcond8_reg_1562) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1) and not((ap_sig_bdd_468 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1)))))) then 
            rgb_data_out_din <= ap_const_lv32_0;
        else 
            rgb_data_out_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- rgb_data_out_write assign process. --
    rgb_data_out_write_assign_proc : process(rgb_data_out_full_n, ap_reg_ppiten_pp4_it2, exitcond2_reg_1347, ap_sig_cseq_ST_pp2_stg0_fsm_7, ap_sig_bdd_282, ap_reg_ppiten_pp2_it1, ap_reg_ppstg_exitcond6_reg_1394_pp4_it2, ap_sig_cseq_ST_pp4_stg2_fsm_16, ap_sig_bdd_387, exitcond8_reg_1562, ap_sig_cseq_ST_pp5_stg0_fsm_22, ap_sig_bdd_468, ap_reg_ppiten_pp5_it1, ap_sig_cseq_ST_st27_fsm_13, ap_sig_cseq_ST_st39_fsm_18)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_13) and not((rgb_data_out_full_n = ap_const_logic_0))) or (not((rgb_data_out_full_n = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_18)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_7) and (ap_const_lv1_0 = exitcond2_reg_1347) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_282 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg2_fsm_16) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_1394_pp4_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and ap_sig_bdd_387))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_22) and (ap_const_lv1_0 = exitcond8_reg_1562) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1) and not((ap_sig_bdd_468 and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1)))))) then 
            rgb_data_out_write <= ap_const_logic_1;
        else 
            rgb_data_out_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp10_fu_643_p2 <= std_logic_vector(unsigned(tmp24_cast_fu_640_p1) + unsigned(p_shl_i1_cast_fu_636_p1));
    tmp11_fu_618_p2 <= std_logic_vector(unsigned(ap_const_lv9_80) + unsigned(tmp_2_i1_cast1_fu_608_p1));
    tmp14_fu_757_p2 <= std_logic_vector(unsigned(p_shl1_i2_cast_fu_737_p1) + unsigned(p_shl2_i2_cast_fu_749_p1));
    tmp15_fu_788_p2 <= std_logic_vector(unsigned(p_shl_i2_cast_fu_781_p1) + unsigned(tmp28_cast_fu_785_p1));
    tmp16_fu_763_p2 <= std_logic_vector(unsigned(ap_const_lv9_80) + unsigned(tmp_2_i2_cast1_fu_753_p1));
        tmp1_cast_fu_943_p1 <= std_logic_vector(resize(signed(tmp_23_fu_936_p3),11));

    tmp20_cast_fu_519_p1 <= std_logic_vector(resize(unsigned(tmp6_reg_1298),16));
    tmp21_cast_fu_528_p1 <= std_logic_vector(resize(unsigned(tmp9_reg_1303),16));
    tmp24_cast_fu_640_p1 <= std_logic_vector(resize(unsigned(tmp5_reg_1332),16));
    tmp25_cast_fu_649_p1 <= std_logic_vector(resize(unsigned(tmp12_reg_1337),16));
    tmp28_cast_fu_785_p1 <= std_logic_vector(resize(unsigned(tmp14_reg_1379),16));
    tmp29_cast_fu_794_p1 <= std_logic_vector(resize(unsigned(tmp17_reg_1384),16));
    tmp2_fu_1022_p2 <= std_logic_vector(unsigned(tmp_27_cast_fu_1014_p1) - unsigned(tmp_28_cast_fu_1018_p1));
        tmp3_cast_fu_1050_p1 <= std_logic_vector(resize(signed(tmp_38_fu_1043_p3),11));

    tmp5_fu_612_p2 <= std_logic_vector(unsigned(p_shl2_i1_cast_fu_604_p1) + unsigned(p_shl1_i1_cast_fu_592_p1));
    tmp6_fu_491_p2 <= std_logic_vector(unsigned(p_shl1_i_cast_fu_471_p1) + unsigned(p_shl2_i_cast_fu_483_p1));
    tmp7_fu_522_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_515_p1) + unsigned(tmp20_cast_fu_519_p1));
    tmp8_fu_497_p2 <= std_logic_vector(unsigned(ap_const_lv9_80) + unsigned(tmp_2_i_cast1_fu_487_p1));
    tmp_10_fu_827_p1 <= std_logic_vector(resize(unsigned(line_buffer_addr2_fu_819_p3),64));
    tmp_12_fu_844_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(pix_j_4_phi_fu_357_p4));
    tmp_13_fu_850_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_844_p2),64));
    tmp_14_cast_fu_987_p1 <= std_logic_vector(resize(unsigned(reg_431),11));
    tmp_14_fu_861_p1 <= std_logic_vector(resize(unsigned(pix_j_9_fu_855_p2),64));
    tmp_15_fu_873_p1 <= std_logic_vector(resize(unsigned(line_buffer_addr5_fu_866_p3),64));
    tmp_16_cast1_fu_995_p1 <= std_logic_vector(resize(unsigned(reg_437),11));
    tmp_16_cast_fu_928_p1 <= std_logic_vector(resize(unsigned(reg_431),9));
    tmp_16_fu_885_p1 <= std_logic_vector(resize(unsigned(line_buffer_addr6_fu_878_p3),64));
    tmp_17_fu_905_p1 <= std_logic_vector(resize(unsigned(line_buffer_addr7_fu_898_p3),64));
    tmp_18_cast_fu_932_p1 <= std_logic_vector(resize(unsigned(reg_437),9));
    tmp_18_fu_947_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_932_p1) - unsigned(tmp_16_cast_fu_928_p1));
    tmp_19_cast_fu_890_p1 <= std_logic_vector(resize(unsigned(line_buffer_q1),9));
    tmp_19_fu_957_p2 <= std_logic_vector(signed(tmp1_cast_fu_943_p1) + signed(tmp_23_cast_cast_fu_953_p1));
    tmp_20_cast_fu_894_p1 <= std_logic_vector(resize(unsigned(line_buffer_q0),9));
    tmp_20_fu_1003_p2 <= std_logic_vector(signed(tmp_19_reg_1451) - signed(tmp_14_cast_fu_987_p1));
    tmp_21_cast_fu_991_p1 <= std_logic_vector(resize(unsigned(reg_431),10));
    tmp_21_fu_981_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_928_p1) + unsigned(tmp_18_cast_fu_932_p1));
    tmp_22_cast_fu_999_p1 <= std_logic_vector(resize(unsigned(reg_437),10));
    tmp_22_fu_1031_p2 <= std_logic_vector(unsigned(tmp_29_cast_fu_1028_p1) - unsigned(tmp_21_cast_fu_991_p1));
        tmp_23_cast_cast_fu_953_p1 <= std_logic_vector(resize(signed(tmp_18_fu_947_p2),11));

    tmp_23_fu_936_p3 <= (tmp_reg_1441 & ap_const_lv1_0);
    tmp_24_fu_1037_p2 <= std_logic_vector(unsigned(tmp_22_fu_1031_p2) - unsigned(tmp_22_cast_fu_999_p1));
    tmp_25_fu_1063_p2 <= "1" when (signed(x_weight_reg_1471) > signed(ap_const_lv11_0)) else "0";
    tmp_26_fu_1068_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(x_weight_reg_1471));
    tmp_27_cast_fu_1014_p1 <= std_logic_vector(resize(unsigned(line_buffer_q1),9));
    tmp_27_fu_1080_p2 <= "1" when (signed(y_weight_fu_1057_p2) > signed(ap_const_lv11_0)) else "0";
    tmp_28_cast_fu_1018_p1 <= std_logic_vector(resize(unsigned(line_buffer_q0),9));
    tmp_28_fu_1089_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(y_weight_reg_1488));
    tmp_29_cast_fu_1028_p1 <= std_logic_vector(resize(unsigned(tmp_21_reg_1466),10));
    tmp_29_fu_1114_p2 <= "1" when (signed(edge_weight_reg_1504) < signed(ap_const_lv12_FF)) else "0";
    tmp_2_i1_cast1_fu_608_p1 <= std_logic_vector(resize(unsigned(reg_427),9));
    tmp_2_i2_cast1_fu_753_p1 <= std_logic_vector(resize(unsigned(reg_427),9));
    tmp_2_i_cast1_fu_487_p1 <= std_logic_vector(resize(unsigned(reg_427),9));
    tmp_30_fu_923_p1 <= std_logic_vector(resize(unsigned(line_buffer_addr8_fu_916_p3),64));
        tmp_31_cast_cast_fu_1054_p1 <= std_logic_vector(resize(signed(tmp_24_reg_1483),11));

    tmp_31_fu_1132_p1 <= std_logic_vector(resize(unsigned(edge_val1_reg_1514),32));
    tmp_32_fu_1135_p2 <= "1" when (signed(tmp_31_fu_1132_p1) > signed(imaxsobelSensitivity)) else "0";
    tmp_33_fu_1140_p2 <= "1" when (signed(tmp_31_fu_1132_p1) < signed(iminsobelSensitivity)) else "0";
    tmp_34_fu_1152_p2 <= (tmp_32_reg_1520 or tmp_33_reg_1526);
    tmp_35_fu_1168_p5 <= (((ap_const_lv8_FF & edge_val_1_reg_1531) & edge_val_1_reg_1531) & edge_val_1_reg_1531);
    tmp_36_fu_963_p1 <= std_logic_vector(resize(unsigned(pix_j_4_reg_353),64));
    tmp_37_fu_976_p1 <= std_logic_vector(resize(unsigned(line_buffer_addr10_fu_968_p3),64));
    tmp_38_fu_1043_p3 <= (tmp2_reg_1478 & ap_const_lv1_0);
    tmp_39_fu_1110_p1 <= edge_weight_fu_1104_p2(8 - 1 downto 0);
    tmp_3_fu_674_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_line_buffer_addr1_reg_1322_pp1_it1),64));
    tmp_40_fu_1198_p1 <= std_logic_vector(resize(unsigned(line_buffer_addr11_fu_1190_p3),64));
    tmp_41_fu_1222_p1 <= std_logic_vector(resize(unsigned(pix_j_5_reg_376),64));
    tmp_42_fu_1211_p1 <= std_logic_vector(resize(unsigned(line_buffer_addr13_fu_1203_p3),64));
    tmp_5_fu_553_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_pix_j_reg_295_pp0_it1),64));
    tmp_8_i1_fu_652_p2 <= std_logic_vector(unsigned(tmp25_cast_fu_649_p1) + unsigned(tmp10_fu_643_p2));
    tmp_8_i2_fu_797_p2 <= std_logic_vector(unsigned(tmp15_fu_788_p2) + unsigned(tmp29_cast_fu_794_p1));
    tmp_8_i_fu_531_p2 <= std_logic_vector(unsigned(tmp7_fu_522_p2) + unsigned(tmp21_cast_fu_528_p1));
    tmp_9_cast_fu_695_p3 <= 
        ap_const_lv8_FF when (not_tmp_8_fu_690_p2(0) = '1') else 
        ap_const_lv8_0;
    tmp_fu_910_p2 <= std_logic_vector(unsigned(tmp_20_cast_fu_894_p1) - unsigned(tmp_19_cast_fu_890_p1));
        x_weight_1_cast_fu_1086_p1 <= std_logic_vector(resize(signed(x_weight_1_reg_1494),12));

    x_weight_1_fu_1073_p3 <= 
        x_weight_reg_1471 when (tmp_25_fu_1063_p2(0) = '1') else 
        tmp_26_fu_1068_p2;
    x_weight_fu_1008_p2 <= std_logic_vector(signed(tmp_20_fu_1003_p2) + signed(tmp_16_cast1_fu_995_p1));
    y_1_fu_668_p2 <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(tmp_i1_reg_1342));
    y_2_fu_813_p2 <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(tmp_i2_reg_1389));
    y_fu_547_p2 <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(tmp_i_reg_1308));
        y_weight_1_cast_fu_1100_p1 <= std_logic_vector(resize(signed(y_weight_1_fu_1094_p3),12));

    y_weight_1_fu_1094_p3 <= 
        y_weight_reg_1488 when (tmp_27_reg_1499(0) = '1') else 
        tmp_28_fu_1089_p2;
    y_weight_fu_1057_p2 <= std_logic_vector(signed(tmp3_cast_fu_1050_p1) + signed(tmp_31_cast_cast_fu_1054_p1));
end behav;
