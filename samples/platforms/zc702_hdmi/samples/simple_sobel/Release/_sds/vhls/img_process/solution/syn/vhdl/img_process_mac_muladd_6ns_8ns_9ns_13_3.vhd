-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2_hlssdsoc
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity img_process_mac_muladd_6ns_8ns_9ns_13_3_DSP48_0 is
port (
    clk: in std_logic;
    rst: in std_logic;
    ce: in std_logic;
    a: in std_logic_vector(6 - 1 downto 0);
    b: in std_logic_vector(8 - 1 downto 0);
    c: in std_logic_vector(9 - 1 downto 0);
    p: out std_logic_vector(13 - 1 downto 0));

end entity;

architecture behav of img_process_mac_muladd_6ns_8ns_9ns_13_3_DSP48_0 is
    signal a_cvt: unsigned(6 - 1 downto 0);
    signal b_cvt: unsigned(8 - 1 downto 0);
    signal c_cvt: unsigned(9 - 1 downto 0);
    signal p_cvt: unsigned(13 - 1 downto 0);

    signal a_reg: unsigned(6 - 1 downto 0) ; 
    signal b_reg: unsigned(8 - 1 downto 0) ; 
    signal m_reg: unsigned(14 - 1 downto 0) ; 
begin

    a_cvt <= unsigned(a);
    b_cvt <= unsigned(b);
    c_cvt <= resize(unsigned(c), 9);

    process(clk)
    begin
        if (clk'event and clk = '1') then
        if rst = '1' then
            a_reg <= (others => '0');
            b_reg <= (others => '0');
            m_reg <= (others => '0');
        else
            if (ce = '1') then
                a_reg <= a_cvt;
                b_reg <= b_cvt;
                m_reg <= resize((unsigned (a_reg) * unsigned (b_reg)),14);
            end if;
        end if;
        end if;
    end process;

    p_cvt <= resize((unsigned ( m_reg) + unsigned ('0' & c_cvt)), 13);
    p <= std_logic_vector(p_cvt);

end architecture;

Library IEEE;
use IEEE.std_logic_1164.all;

entity img_process_mac_muladd_6ns_8ns_9ns_13_3 is
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER);
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        ce : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR(din0_WIDTH - 1 DOWNTO 0);
        din1 : IN STD_LOGIC_VECTOR(din1_WIDTH - 1 DOWNTO 0);
        din2 : IN STD_LOGIC_VECTOR(din2_WIDTH - 1 DOWNTO 0);
        dout : OUT STD_LOGIC_VECTOR(dout_WIDTH - 1 DOWNTO 0));
end entity;

architecture arch of img_process_mac_muladd_6ns_8ns_9ns_13_3 is
    component img_process_mac_muladd_6ns_8ns_9ns_13_3_DSP48_0 is
        port (
            clk : IN STD_LOGIC;
            rst : IN STD_LOGIC;
            ce : IN STD_LOGIC;
            a : IN STD_LOGIC_VECTOR;
            b : IN STD_LOGIC_VECTOR;
            c : IN STD_LOGIC_VECTOR;
            p : OUT STD_LOGIC_VECTOR);
    end component;



begin
    img_process_mac_muladd_6ns_8ns_9ns_13_3_DSP48_0_U :  component img_process_mac_muladd_6ns_8ns_9ns_13_3_DSP48_0
    port map (
        clk => clk,
        rst => reset,
        ce => ce,
        a => din0,
        b => din1,
        c => din2,
        p => dout);

end architecture;


